Funksjoner til peer manager:


/**@brief Function for handling Peer Manager events.
 *
 * @param[in] p_evt  Peer Manager event.
 */

  static void pm_evt_handler(pm_evt_t const * p_evt)
{
    //ret_code_t err_code;

    switch(p_evt->evt_id)
    {
        case PM_EVT_BONDED_PEER_CONNECTED:
        {
//            NRF_LOG_INFO("Connected to previously bonded device\r\n");
//            err_code = pm_peer_rank_highest(p_evt->peer_id);
//            if (err_code != NRF_ERROR_BUSY)
//            {
//                    APP_ERROR_CHECK(err_code);
//            }
        }break;//PM_EVT_BONDED_PEER_CONNECTED

        case PM_EVT_CONN_SEC_START:
            break;//PM_EVT_CONN_SEC_START

        case PM_EVT_CONN_SEC_SUCCEEDED:
        {	
							//printf("kommer jeg her??");
//            NRF_LOG_INFO("Link secured. Role: %d. conn_handle: %d, Procedure: %d\r\n",
//                           ble_conn_state_role(p_evt->conn_handle),
//													 p_evt->conn_handle,
//											  		p_evt->params.conn_sec_succeeded.procedure);
//            err_code = pm_peer_rank_highest(p_evt->peer_id);
//            if (err_code != NRF_ERROR_BUSY)
//            {
//                    APP_ERROR_CHECK(err_code);
//            }
        }break;//PM_EVT_CONN_SEC_SUCCEEDED

        case PM_EVT_CONN_SEC_FAILED:
        {
            /** In some cases, when securing fails, it can be restarted directly. Sometimes it can
             *  be restarted, but only after changing some Security Parameters. Sometimes, it cannot
             *  be restarted until the link is disconnected and reconnected. Sometimes it is
             *  impossible, to secure the link, or the peer device does not support it. How to
             *  handle this error is highly application dependent. */
            switch (p_evt->params.conn_sec_failed.error)
            {
                case PM_CONN_SEC_ERROR_PIN_OR_KEY_MISSING:
//                    // Rebond if one party has lost its keys.
//                    err_code = pm_conn_secure(p_evt->conn_handle, true);
//                    if (err_code != NRF_ERROR_INVALID_STATE)
//                    {
//                        APP_ERROR_CHECK(err_code);
//                    }
                    break;//PM_CONN_SEC_ERROR_PIN_OR_KEY_MISSING

                default:
                    break;
            }
        }break;//PM_EVT_CONN_SEC_FAILED

        case PM_EVT_CONN_SEC_CONFIG_REQ:
        {
            // Reject pairing request from an already bonded peer.
            //pm_conn_sec_config_t conn_sec_config = {.allow_repairing = false};
            //pm_conn_sec_config_reply(p_evt->conn_handle, &conn_sec_config);
        }break;//PM_EVT_CONN_SEC_CONFIG_REQ

        case PM_EVT_STORAGE_FULL:
        {
            // Run garbage collection on the flash.
        //    err_code = fds_gc();
         //   if (err_code == FDS_ERR_BUSY || err_code == FDS_ERR_NO_SPACE_IN_QUEUES)
          //  {
           //     // Retry.
           // }
            //else
            //{
             //   APP_ERROR_CHECK(err_code);
            //}
        }break;//PM_EVT_STORAGE_FULL

        case PM_EVT_ERROR_UNEXPECTED:
            // Assert.
            APP_ERROR_CHECK(p_evt->params.error_unexpected.error);
            break;//PM_EVT_ERROR_UNEXPECTED

        case PM_EVT_PEER_DATA_UPDATE_SUCCEEDED:
            break;//PM_EVT_PEER_DATA_UPDATE_SUCCEEDED

        case PM_EVT_PEER_DATA_UPDATE_FAILED:
            // Assert.
            APP_ERROR_CHECK_BOOL(false);
            break;//PM_EVT_PEER_DATA_UPDATE_FAILED

        case PM_EVT_PEER_DELETE_SUCCEEDED:
            break;//PM_EVT_PEER_DELETE_SUCCEEDED

        case PM_EVT_PEER_DELETE_FAILED:
            // Assert.
            APP_ERROR_CHECK(p_evt->params.peer_delete_failed.error);
            break;//PM_EVT_PEER_DELETE_FAILED

        case PM_EVT_PEERS_DELETE_SUCCEEDED:
            //advertising_start();
            break;//PM_EVT_PEERS_DELETE_SUCCEEDED

        case PM_EVT_PEERS_DELETE_FAILED:
            // Assert.
            APP_ERROR_CHECK(p_evt->params.peers_delete_failed_evt.error);
            break;//PM_EVT_PEERS_DELETE_FAILED

        case PM_EVT_LOCAL_DB_CACHE_APPLIED:
            break;//PM_EVT_LOCAL_DB_CACHE_APPLIED

        case PM_EVT_LOCAL_DB_CACHE_APPLY_FAILED:
            // The local database has likely changed, send service changed indications.
            //pm_local_database_has_changed();
            break;//PM_EVT_LOCAL_DB_CACHE_APPLY_FAILED

        case PM_EVT_SERVICE_CHANGED_IND_SENT:
            break;//PM_EVT_SERVICE_CHANGED_IND_SENT

        case PM_EVT_SERVICE_CHANGED_IND_CONFIRMED:
            break;//PM_EVT_SERVICE_CHANGED_IND_SENT

        default:
            // No implementation needed.
            break;
    }
}




/**@brief Function for the Peer Manager initialization.
 *
 * @param[in] erase_bonds  Indicates whether bonding information should be cleared from
 *                         persistent storage during initialization of the Peer Manager.
 */
static void peer_manager_init(bool erase_bonds)
{
    ret_code_t err_code;

    err_code = pm_init();
    APP_ERROR_CHECK(err_code);

    if (erase_bonds)
    {
        err_code = pm_peers_delete();
        APP_ERROR_CHECK(err_code);
    }
	
    err_code = pm_register(pm_evt_handler);
    APP_ERROR_CHECK(err_code);
}


/**@brief Retrieve a list of peer manager peer IDs.
 *
 * @param[inout] p_peers   The buffer where to store the list of peer IDs.
 * @param[inout] p_size    In: The size of the @p p_peers buffer.
 *                         Out: The number of peers copied in the buffer.
 */



//static void whitelist_load()
//{
//    ret_code_t   ret;
//    pm_peer_id_t peers[1];
//    uint32_t     peer_cnt;

//    memset(peers, PM_PEER_ID_INVALID, sizeof(peers));
//    peer_cnt = (sizeof(peers) / sizeof(pm_peer_id_t));

//    // Load all peers from flash and whitelist them.
//    peer_list_get(peers, &peer_cnt);

//    ret = pm_whitelist_set(peers, peer_cnt);
//    APP_ERROR_CHECK(ret);

//    // Setup the device identies list.
//    // Some SoftDevices do not support this feature.
//    ret = pm_device_identities_list_set(peers, peer_cnt);
//    if (ret != NRF_ERROR_NOT_SUPPORTED)
//    {
//        APP_ERROR_CHECK(ret);
//    }
//}
